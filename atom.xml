<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Andy&#39;s Blog</title>
  
  <subtitle>高山流水遇知音，彩云追月得知己。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://iszhouhua.github.io/"/>
  <updated>2018-10-16T13:48:17.748Z</updated>
  <id>https://iszhouhua.github.io/</id>
  
  <author>
    <name>周华</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git常用命令</title>
    <link href="https://iszhouhua.github.io/detail/20181015/git-common-commands.html"/>
    <id>https://iszhouhua.github.io/detail/20181015/git-common-commands.html</id>
    <published>2018-10-15T14:40:59.703Z</published>
    <updated>2018-10-16T13:48:17.748Z</updated>
    
    <content type="html"><![CDATA[<p>部分git常用命令。</p><a id="more"></a><h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><h2 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前版本库状态</span></span><br><span class="line">$ git status</span><br><span class="line"><span class="comment"># 简化的版本库状态。--s是--short的简写</span></span><br><span class="line">$ git status -s</span><br><span class="line"><span class="comment"># 查看尚未暂存的文件更新了哪些部分</span></span><br><span class="line">$ git diff</span><br><span class="line"><span class="comment"># 查看已暂存文件中更新的内容(Git 1.6.1以下版本使用 git diff --cached)</span></span><br><span class="line">$ git diff --staged</span><br></pre></td></tr></table></figure><h2 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加所有后缀为.c的文件到暂存区</span></span><br><span class="line">$ git add *.c</span><br><span class="line"><span class="comment"># 递归的添加当前目录所有文件到暂存区</span></span><br><span class="line">$ git add .</span><br><span class="line"><span class="comment"># 添加LICENSE文件到暂存区</span></span><br><span class="line">$ git add LICENSE</span><br><span class="line"><span class="comment"># 添加所有改动文件到暂存区</span></span><br><span class="line">$ git add --all</span><br></pre></td></tr></table></figure><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交暂存区的代码</span></span><br><span class="line">$ git commit -m <span class="string">'commit message'</span></span><br><span class="line"><span class="comment"># 跳过暂存区直接提交所有已追踪的文件</span></span><br><span class="line">$ git commit -a -m <span class="string">'commit message'</span></span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除file.md文件，本地文件也会一同删除</span></span><br><span class="line">$ git rm file.md</span><br><span class="line"><span class="comment"># 删除版本控制中的file.md文件，保留本地文件</span></span><br><span class="line">$ git rm --cached file.md</span><br><span class="line"><span class="comment"># 强制删除file.md文件，用于防止误删还没有添加到快照的数据</span></span><br><span class="line">$ git rm -f file.md</span><br><span class="line"><span class="comment"># 删除 log 目录下扩展名为 .log 的所有文件</span></span><br><span class="line">$ git rm <span class="built_in">log</span>/\*.<span class="built_in">log</span></span><br><span class="line"><span class="comment"># 重命名文件，相当于执行了以下三条命令</span></span><br><span class="line"><span class="comment"># mv README.md README</span></span><br><span class="line"><span class="comment"># git rm README.md</span></span><br><span class="line"><span class="comment"># git add README</span></span><br><span class="line">$ git mv README.md README</span><br></pre></td></tr></table></figure><h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改最后一次提交</span></span><br><span class="line">$ git commit --amend</span><br><span class="line"><span class="comment"># 取消暂存 benchmarks.rb 文件</span></span><br><span class="line">$ git reset HEAD benchmarks.rb</span><br><span class="line"><span class="comment"># 撤销对 benchmarks.rb 文件的修改</span></span><br><span class="line">$ git checkout -- benchmarks.rb</span><br></pre></td></tr></table></figure><h2 id="历史记录"><a href="#历史记录" class="headerlink" title="历史记录"></a>历史记录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有的更新</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line"><span class="comment"># -p，用来显示每次提交的内容差异。  -2 表示仅显示最近两次提交</span></span><br><span class="line">$ git <span class="built_in">log</span> -p -2</span><br><span class="line"><span class="comment"># 查看每次提交的简略的统计信息</span></span><br><span class="line">$ git <span class="built_in">log</span> --<span class="built_in">stat</span></span><br><span class="line"><span class="comment"># 以指定格式输出历史记录(oneline，short，full，fuller）</span></span><br><span class="line">$ git <span class="built_in">log</span> --pretty=oneline</span><br><span class="line"><span class="comment"># 格式化输出历史记录</span></span><br><span class="line">$ git <span class="built_in">log</span> --pretty=format:<span class="string">"%h - %an, %ar : %s"</span></span><br><span class="line"><span class="comment"># --graph显示 ASCII 图形表示的分支合并历史。</span></span><br><span class="line">$ git <span class="built_in">log</span> --pretty=format:<span class="string">"%h %s"</span> --graph</span><br></pre></td></tr></table></figure><h3 id="git-log-的常用选项"><a href="#git-log-的常用选项" class="headerlink" title="git log 的常用选项"></a><code>git log</code> 的常用选项</h3><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td><code>-p</code></td><td>按补丁格式显示每个更新之间的差异。</td></tr><tr><td><code>--stat</code></td><td>显示每次更新的文件修改统计信息。</td></tr><tr><td><code>--shortstat</code></td><td>只显示 –stat 中最后的行数修改添加移除统计。</td></tr><tr><td><code>--name-only</code></td><td>仅在提交信息后显示已修改的文件清单。</td></tr><tr><td><code>--name-status</code></td><td>显示新增、修改、删除的文件清单。</td></tr><tr><td><code>--abbrev-commit</code></td><td>仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。</td></tr><tr><td><code>--relative-date</code></td><td>使用较短的相对时间显示（比如，“2 weeks ago”）。</td></tr><tr><td><code>--graph</code></td><td>显示 ASCII 图形表示的分支合并历史。</td></tr><tr><td><code>--pretty</code></td><td>使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）。</td></tr></tbody></table><h3 id="限制-git-log-输出的选项"><a href="#限制-git-log-输出的选项" class="headerlink" title="限制 git log 输出的选项"></a>限制 <code>git log</code> 输出的选项</h3><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td><code>-(n)</code></td><td>仅显示最近的 n 条提交</td></tr><tr><td><code>--since</code>, <code>--after</code></td><td>仅显示指定时间之后的提交。</td></tr><tr><td><code>--until</code>, <code>--before</code></td><td>仅显示指定时间之前的提交。</td></tr><tr><td><code>--author</code></td><td>仅显示指定作者相关的提交。</td></tr><tr><td><code>--committer</code></td><td>仅显示指定提交者相关的提交。</td></tr><tr><td><code>--grep</code></td><td>仅显示含指定关键字的提交</td></tr><tr><td><code>-S</code></td><td>仅显示添加或移除了某个关键字的提交</td></tr></tbody></table><h3 id="git-log-pretty-format-常用的选项"><a href="#git-log-pretty-format-常用的选项" class="headerlink" title="git log --pretty=format 常用的选项"></a><code>git log --pretty=format</code> 常用的选项</h3><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td><code>%H</code></td><td>提交对象（commit）的完整哈希字串</td></tr><tr><td><code>%h</code></td><td>提交对象的简短哈希字串</td></tr><tr><td><code>%T</code></td><td>树对象（tree）的完整哈希字串</td></tr><tr><td><code>%t</code></td><td>树对象的简短哈希字串</td></tr><tr><td><code>%P</code></td><td>父对象（parent）的完整哈希字串</td></tr><tr><td><code>%p</code></td><td>父对象的简短哈希字串</td></tr><tr><td><code>%an</code></td><td>作者（author）的名字</td></tr><tr><td><code>%ae</code></td><td>作者的电子邮件地址</td></tr><tr><td><code>%ad</code></td><td>作者修订日期（可以用 –date= 选项定制格式）</td></tr><tr><td><code>%ar</code></td><td>作者修订日期，按多久以前的方式显示</td></tr><tr><td><code>%cn</code></td><td>提交者（committer）的名字</td></tr><tr><td><code>%ce</code></td><td>提交者的电子邮件地址</td></tr><tr><td><code>%cd</code></td><td>提交日期</td></tr><tr><td><code>%cr</code></td><td>提交日期，按多久以前的方式显示</td></tr><tr><td><code>%s</code></td><td>提交说明</td></tr></tbody></table><h1 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h1><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 origin 仓库信息</span></span><br><span class="line">$ git remote show origin</span><br><span class="line"><span class="comment"># 查看远程库的简短名字</span></span><br><span class="line">$ git remote</span><br><span class="line"><span class="comment"># 显示对应的克隆地址。-v 是 --verbose 的简写</span></span><br><span class="line">$ git remote -v</span><br></pre></td></tr></table></figure><h2 id="拉取"><a href="#拉取" class="headerlink" title="拉取"></a>拉取</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 克隆libgit2</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/libgit2/libgit2</span><br><span class="line"><span class="comment"># 克隆libgit2并命名为mylibgit</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/libgit2/libgit2 mylibgit</span><br><span class="line"><span class="comment"># 以 ssh 协议克隆仓库</span></span><br><span class="line">$ git <span class="built_in">clone</span> ssh://user@server/project.git</span><br><span class="line"><span class="comment"># 添加指定地址的远程仓库并命名为pb</span></span><br><span class="line">$ git remote add pb git://github.com/paulboone/ticgit.git</span><br><span class="line"><span class="comment"># 抓取pb仓库的数据</span></span><br><span class="line">$ git fetch pb</span><br></pre></td></tr></table></figure><h2 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把本地的 master 分支推送到 origin 服务器上</span></span><br><span class="line">$ git push origin master</span><br><span class="line"><span class="comment"># 强行推送本地代码到服务器 --f是--force的简写</span></span><br><span class="line">git push --f</span><br></pre></td></tr></table></figure><h2 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除本地的paul仓库</span></span><br><span class="line">$ git remote rm paul</span><br><span class="line"><span class="comment"># 修改远程仓库在本地的简称，把 pb 改成 paul</span></span><br><span class="line">$ git remote rename pb paul</span><br></pre></td></tr></table></figure><h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><h2 id="查看-1"><a href="#查看-1" class="headerlink" title="查看"></a>查看</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有分支</span></span><br><span class="line">$ git branch</span><br><span class="line"><span class="comment"># 查看各分支最后一次提交信息</span></span><br><span class="line">$ git branch -v</span><br><span class="line"><span class="comment"># 查看哪些分支已被并入当前分支</span></span><br><span class="line">$ git branch --merged</span><br><span class="line"><span class="comment"># 查看哪些分支没有并入当前分支</span></span><br><span class="line">$ git branch --no-merged</span><br></pre></td></tr></table></figure><h2 id="添加-1"><a href="#添加-1" class="headerlink" title="添加"></a>添加</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建一个 testing 分支</span></span><br><span class="line">$ git branch testing</span><br><span class="line"><span class="comment"># 切换到 testing 分支</span></span><br><span class="line">$ git checkout testing</span><br><span class="line"><span class="comment"># 新建并切换到 iss53 分支</span></span><br><span class="line">$ git checkout -b iss53</span><br></pre></td></tr></table></figure><h2 id="推送-1"><a href="#推送-1" class="headerlink" title="推送"></a>推送</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 推送本地的 serverfix 分支到 origin 远程仓库</span></span><br><span class="line">$ git push origin serverfix</span><br><span class="line"><span class="comment"># 推送本地的 serverfix 分支到 origin 远程仓库的 awesomebranch 分支</span></span><br><span class="line">$ git push origin serverfix:awesomebranch</span><br></pre></td></tr></table></figure><h2 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 合并 hotfix 分支到当前分支</span></span><br><span class="line">$ git merge hotfix</span><br><span class="line"><span class="comment"># 将 server 分支变基到 master</span></span><br><span class="line">$ git rebase master server</span><br><span class="line"><span class="comment"># 取出 client 分支，找出 client 分支和 server 分支的共同祖先之后的变化，然后把它们在 master 上重演一遍</span></span><br><span class="line">$ git rebase --onto master server client</span><br></pre></td></tr></table></figure><h2 id="删除-2"><a href="#删除-2" class="headerlink" title="删除"></a>删除</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除 hotfix 分支</span></span><br><span class="line">$ git branch -d hotfix</span><br><span class="line"><span class="comment"># 强制删除 testing 分支</span></span><br><span class="line">git branch -D testing、</span><br><span class="line"><span class="comment"># 删除远程仓库的 serverfix 分支</span></span><br><span class="line">$ git push origin :serverfix</span><br></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h2><p>文件 <code>.gitignore</code> 的格式规范：</p><ul><li>所有空行或者以 <code>＃</code> 开头的行都会被 Git 忽略。</li><li>可以使用标准的 glob 模式匹配。</li><li>匹配模式可以以（<code>/</code>）开头防止递归。</li><li>匹配模式可以以（<code>/</code>）结尾指定目录。</li><li>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（<code>!</code>）取反。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 忽略所有以.o或.a结尾的文件</span></span><br><span class="line">*.[oa]</span><br><span class="line"><span class="comment"># 忽略所有以波浪符（~）结尾的文件</span></span><br><span class="line">*~</span><br><span class="line"><span class="comment"># 跟踪lib.a，即使上面忽略了这个文件</span></span><br><span class="line">!lib.a</span><br><span class="line"><span class="comment"># 只忽略当前目录中的TODO文件，不忽略subdir/TODO</span></span><br><span class="line">/TODO</span><br><span class="line"><span class="comment"># 忽略build目录中的所有文件</span></span><br><span class="line">build/</span><br><span class="line"><span class="comment"># 忽略doc/notes.txt，但不忽略doc/server/arch.txt</span></span><br><span class="line">doc/*.txt</span><br><span class="line"><span class="comment"># 忽略doc目录中的所有.pdf文件</span></span><br><span class="line">doc/**/*.pdf</span><br></pre></td></tr></table></figure><h2 id="查看配置"><a href="#查看配置" class="headerlink" title="查看配置"></a>查看配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有git配置</span></span><br><span class="line">$ git config --list</span><br><span class="line"><span class="comment"># 查看user.name的配置</span></span><br><span class="line">$ git config user.name</span><br></pre></td></tr></table></figure><h2 id="设置用户信息"><a href="#设置用户信息" class="headerlink" title="设置用户信息"></a>设置用户信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置用户名</span></span><br><span class="line">$ git config --global user.name <span class="string">"Your Name"</span></span><br><span class="line"><span class="comment"># 设置邮箱</span></span><br><span class="line">$ git config --global user.email <span class="string">"email@example.com"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;部分git常用命令。&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://iszhouhua.github.io/tags/git/"/>
    
      <category term="命令" scheme="https://iszhouhua.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
</feed>

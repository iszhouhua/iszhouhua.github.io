[{"title":"git常用命令","date":"2018-10-15T14:40:59.703Z","path":"detail/20181015/git-common-commands.html","text":"部分git常用命令。 基本操作查看状态12345678# 查看当前版本库状态$ git status# 简化的版本库状态。--s是--short的简写$ git status -s# 查看尚未暂存的文件更新了哪些部分$ git diff# 查看已暂存文件中更新的内容(Git 1.6.1以下版本使用 git diff --cached)$ git diff --staged 添加12345678# 添加所有后缀为.c的文件到暂存区$ git add *.c# 递归的添加当前目录所有文件到暂存区$ git add .# 添加LICENSE文件到暂存区$ git add LICENSE# 添加所有改动文件到暂存区$ git add --all 提交1234# 提交暂存区的代码$ git commit -m 'commit message'# 跳过暂存区直接提交所有已追踪的文件$ git commit -a -m 'commit message' 删除12345678910111213# 删除file.md文件，本地文件也会一同删除$ git rm file.md# 删除版本控制中的file.md文件，保留本地文件$ git rm --cached file.md# 强制删除file.md文件，用于防止误删还没有添加到快照的数据$ git rm -f file.md# 删除 log 目录下扩展名为 .log 的所有文件$ git rm log/\\*.log# 重命名文件，相当于执行了以下三条命令# mv README.md README# git rm README.md# git add README$ git mv README.md README 撤销123456# 修改最后一次提交$ git commit --amend# 取消暂存 benchmarks.rb 文件$ git reset HEAD benchmarks.rb# 撤销对 benchmarks.rb 文件的修改$ git checkout -- benchmarks.rb 历史记录123456789101112# 列出所有的更新$ git log# -p，用来显示每次提交的内容差异。 -2 表示仅显示最近两次提交$ git log -p -2# 查看每次提交的简略的统计信息$ git log --stat# 以指定格式输出历史记录(oneline，short，full，fuller）$ git log --pretty=oneline# 格式化输出历史记录$ git log --pretty=format:\"%h - %an, %ar : %s\"# --graph显示 ASCII 图形表示的分支合并历史。$ git log --pretty=format:\"%h %s\" --graph git log 的常用选项 选项 说明 -p 按补丁格式显示每个更新之间的差异。 --stat 显示每次更新的文件修改统计信息。 --shortstat 只显示 –stat 中最后的行数修改添加移除统计。 --name-only 仅在提交信息后显示已修改的文件清单。 --name-status 显示新增、修改、删除的文件清单。 --abbrev-commit 仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。 --relative-date 使用较短的相对时间显示（比如，“2 weeks ago”）。 --graph 显示 ASCII 图形表示的分支合并历史。 --pretty 使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）。 限制 git log 输出的选项 选项 说明 -(n) 仅显示最近的 n 条提交 --since, --after 仅显示指定时间之后的提交。 --until, --before 仅显示指定时间之前的提交。 --author 仅显示指定作者相关的提交。 --committer 仅显示指定提交者相关的提交。 --grep 仅显示含指定关键字的提交 -S 仅显示添加或移除了某个关键字的提交 git log --pretty=format 常用的选项 选项 说明 %H 提交对象（commit）的完整哈希字串 %h 提交对象的简短哈希字串 %T 树对象（tree）的完整哈希字串 %t 树对象的简短哈希字串 %P 父对象（parent）的完整哈希字串 %p 父对象的简短哈希字串 %an 作者（author）的名字 %ae 作者的电子邮件地址 %ad 作者修订日期（可以用 –date= 选项定制格式） %ar 作者修订日期，按多久以前的方式显示 %cn 提交者（committer）的名字 %ce 提交者的电子邮件地址 %cd 提交日期 %cr 提交日期，按多久以前的方式显示 %s 提交说明 远程操作查看123456# 查看 origin 仓库信息$ git remote show origin# 查看远程库的简短名字$ git remote# 显示对应的克隆地址。-v 是 --verbose 的简写$ git remote -v 拉取12345678910# 克隆libgit2$ git clone https://github.com/libgit2/libgit2# 克隆libgit2并命名为mylibgit$ git clone https://github.com/libgit2/libgit2 mylibgit# 以 ssh 协议克隆仓库$ git clone ssh://user@server/project.git# 添加指定地址的远程仓库并命名为pb$ git remote add pb git://github.com/paulboone/ticgit.git# 抓取pb仓库的数据$ git fetch pb 推送1234# 把本地的 master 分支推送到 origin 服务器上$ git push origin master# 强行推送本地代码到服务器 --f是--force的简写git push --f 删除1234# 删除本地的paul仓库$ git remote rm paul# 修改远程仓库在本地的简称，把 pb 改成 paul$ git remote rename pb paul 分支查看12345678# 列出所有分支$ git branch# 查看各分支最后一次提交信息$ git branch -v# 查看哪些分支已被并入当前分支$ git branch --merged# 查看哪些分支没有并入当前分支$ git branch --no-merged 添加123456# 新建一个 testing 分支$ git branch testing# 切换到 testing 分支$ git checkout testing# 新建并切换到 iss53 分支$ git checkout -b iss53 推送1234# 推送本地的 serverfix 分支到 origin 远程仓库$ git push origin serverfix# 推送本地的 serverfix 分支到 origin 远程仓库的 awesomebranch 分支$ git push origin serverfix:awesomebranch 合并123456# 合并 hotfix 分支到当前分支$ git merge hotfix# 将 server 分支变基到 master$ git rebase master server# 取出 client 分支，找出 client 分支和 server 分支的共同祖先之后的变化，然后把它们在 master 上重演一遍$ git rebase --onto master server client 删除123456# 删除 hotfix 分支$ git branch -d hotfix# 强制删除 testing 分支git branch -D testing、# 删除远程仓库的 serverfix 分支$ git push origin :serverfix 配置忽略文件文件 .gitignore 的格式规范： 所有空行或者以 ＃ 开头的行都会被 Git 忽略。 可以使用标准的 glob 模式匹配。 匹配模式可以以（/）开头防止递归。 匹配模式可以以（/）结尾指定目录。 要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。 1234567891011121314# 忽略所有以.o或.a结尾的文件*.[oa]# 忽略所有以波浪符（~）结尾的文件*~# 跟踪lib.a，即使上面忽略了这个文件!lib.a# 只忽略当前目录中的TODO文件，不忽略subdir/TODO/TODO# 忽略build目录中的所有文件build/# 忽略doc/notes.txt，但不忽略doc/server/arch.txtdoc/*.txt# 忽略doc目录中的所有.pdf文件doc/**/*.pdf 查看配置1234# 查看所有git配置$ git config --list# 查看user.name的配置$ git config user.name 设置用户信息1234# 设置用户名$ git config --global user.name \"Your Name\"# 设置邮箱$ git config --global user.email \"email@example.com\"","tags":[{"name":"git","slug":"git","permalink":"https://iszhouhua.github.io/tags/git/"},{"name":"命令","slug":"命令","permalink":"https://iszhouhua.github.io/tags/命令/"}]}]